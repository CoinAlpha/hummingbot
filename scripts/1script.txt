# start --script 1script.py

import logging
import time
from decimal import Decimal
from statistics import mean
from typing import List

import requests

import hummingbot.client.settings as settings
from hummingbot.connector.exchange_base import ExchangeBase
from hummingbot.connector.utils import split_hb_trading_pair
from hummingbot.core.data_type.order_candidate import OrderCandidate
from hummingbot.core.event.events import OrderFilledEvent, OrderType, TradeType
from hummingbot.core.rate_oracle.rate_oracle import RateOracle
from hummingbot.strategy.script_strategy_base import ScriptStrategyBase

from hummingbot.core.utils.trading_pair_fetcher import TradingPairFetcher


class Script1(ScriptStrategyBase):

    # It is best to first use a paper trade exchange connector 
    # while coding your strategy, once you are happy with it
    # then switch to real one.
    arbitrage_markets = ["gate_io_paper_trade", "ascend_ex_paper_trade"]
    arbitrage_pairs = ["ETH-USDT", "TARA-USDT", "LOOKS-USDT", "ATLAS-USDT", "SOS-USDT", "PORT-USDT", "PROM-USDT"]# ,"AVAX-USDT","DOT-USDT", "ADA-USDT"]
    markets = {arbitrage_markets[0]: arbitrage_pairs,
			   arbitrage_markets[1]: arbitrage_pairs
    }
    min_profitability = Decimal('0.005')


    def on_tick(self):
        for pair in self.arbitrage_pairs:
            market_1_bid = self.connectors[self.arbitrage_markets[0]].get_price(pair,False)
            market_1_ask = self.connectors[self.arbitrage_markets[0]].get_price(pair,True)
            market_2_bid = self.connectors[self.arbitrage_markets[1]].get_price(pair,False)
            market_2_ask = self.connectors[self.arbitrage_markets[1]].get_price(pair,True)
            self.logger().info(f"{pair} - Bid: {market_1_bid}, Ask: {market_1_ask}")
            profitability_buy_1_sell_2 = market_1_bid/market_2_ask - 1
            profitability_buy_2_sell_1 = market_2_bid/market_1_ask - 1
            
            if profitability_buy_1_sell_2 > self.min_profitability:
                self.notify_hb_app_with_timestamp(f"Pair{pair}: buy_1_sell_2: {profitability_buy_1_sell_2:.5f}")
            if profitability_buy_2_sell_1 > self.min_profitability:
                self.notify_hb_app_with_timestamp(f"Pair{pair}: buy_2_sell_1: {profitability_buy_2_sell_1:.5f}")

    #     for market in self.markets:
    #         pairs = self.markets[market]
    #         for pair in pairs:
    #             # price = self.connectors[market].get_mid_price(pair)
    #             bid_price = self.connectors[market].get_price(pair,False)
    #             ask_price = self.connectors[market].get_price(pair,True)
    #             bid_msg = f"Market: {market} with Pair: {pair} @ bid_price: ${bid_price}"
    #             ask_msg = f"Market: {market} with Pair: {pair} @ ask_price: ${ask_price}"
    #             self.logger().info(bid_msg)
    #             self.logger().info(ask_msg)
    #             # self.notify_hb_app_with_timestamp(msg)

    # def calculate_arbitrage_top_order_profitability(self, object market_pair):
    #     """
    #     Calculate the profitability of crossing the exchanges in both directions (buy on exchange 2 + sell
    #     on exchange 1 | buy on exchange 1 + sell on exchange 2) using the best bid and ask price on each.

    #     :param market_pair:
    #     :return: (double, double) that indicates profitability of arbitraging on each side
    #     """

    #     cdef:
    #         object market_1_bid_price = market_pair.first.get_price(False)
    #         object market_1_ask_price = market_pair.first.get_price(True)
    #         object market_2_bid_price = self.market_conversion_rate(market_pair.second) * \
    #             market_pair.second.get_price(False)
    #         object market_2_ask_price = self.market_conversion_rate(market_pair.second) * \
    #             market_pair.second.get_price(True)

    #     profitability_buy_2_sell_1 = market_1_bid_price / market_2_ask_price - 1
    #     profitability_buy_1_sell_2 = market_2_bid_price / market_1_ask_price - 1
    #     return profitability_buy_2_sell_1, profitability_buy_1_sell_2